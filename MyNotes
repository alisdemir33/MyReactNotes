Props.Children Kullanımı(Composition)
(Expense Tracker de kullanılıyor..)
Children, is a reserved name and the value of this special children prop 
will always be the content between the opening and closing tags of your custom component.
So in this case,this content between the opening and closing card tag,
that is what will be available on props children inside of that card.

//neden wrapper div ya  da array olmadan jsx dönemeyiz???
This is two separate elements side by side.That's why you always need such a wrapper,
because in createElement world, you always create one element which then may have more child elements.

46_//event onClick on a button is also a props ( on.. props) that is being internally used by for example Button
they all accept a function as a props..

47_when we define a cons arrow functşon as an event handler(onClick vs.) then dont put () like this.. onclick={clickHandler()}
just put the name, otherwise it is called immediately rather than being CLicked..
48-useState should be called atthe beginning of component definiton
set function does not run immediately, but is scheduled, so after calling console.log gives the prev value
*****************************
52   <input type="text" value={title} onChange={titleChangeHandler} />
   
   const titleChangeHandler =(event) =>{
        event.preventDefault();
        setTitle(event.target.value);
    }
    in this scenario event is automaticly send by javascript, we dont need to send event explicity.
    we added the function to on.. event so, event is sent auto mod..
    
  53..
  useState i eğer number veya Date için kullanıyor isek bile 
  useState(''); şekinde kullanırız. çünkü event.target.value her zaman stringdir
  
  54..
  if your state update depends on the previous state than use this format..
  setCounter( (prevState) =>{ return prevState+1 })
  
  58--child to parent data sending;
  functions are sent as props and we do not call them by adding  ()  assigning for axample onClick, it is only POINTER,
  then where ever the real funciton is defined, it automatically takes the sent parameter object..
  
  74-
  style verince önceden verilen tüm cssler eziliyor. style="" ilk önceliğe sahip, verince düzeltmek zor..
  
    <div className={`form-control ${!isValid? 'invalid' :''}`}>
        <label >Course Goal</label>
        <input type="text" onChange={goalInputChangeHandler} />
      </div>
      
.form-control.invalid input{
border-color: red;
background-color: darksalmon;
}

.form-control.invalid label{
color:red;
}

.form-control {
  margin: 0.5rem 0;
}

.form-control label {
  font-weight: bold;
  display: block;
  margin-bottom: 0.5rem;
}

.form-control input {
  display: block;
  width: 100%;
  border: 1px solid #ccc;
  font: inherit;
  line-height: 1.5rem;
  padding: 0 0.25rem;
}
  
  ******************useEffect useReducers**************************
  useEffect kullanırkan cleanup function effectin bir sonraki çalışmasından hemen önce çalışır.
  
  useReducer özellikle kompleks stateleri ve biribirne bağlı stateleri yönetirken fayadalıdır.
  Reducer function can be out of component func because it does not and should not need to access any value in component function..
  
Adding Nested Properties As Dependencies To useEffect
In the previous lecture, we used object destructuring to add object properties as dependencies to useEffect().

const { someProperty } = someObject;
useEffect(() => {
  // code that only uses someProperty ...
}, [someProperty]);
This is a very common pattern and approach, which is why I typically use it and why I show it here (I will keep on using it throughout the course).

I just want to point out, that they key thing is NOT that we use destructuring but that we pass specific properties instead of the entire object as a dependency.

We could also write this code and it would work in the same way.

useEffect(() => {
  // code that only uses someProperty ...
}, [someObject.someProperty]);
This works just fine as well!

But you should avoid this code:

useEffect(() => {
  // code that only uses someProperty ...
}, [someObject]);
Why?

Because now the effect function would re-run whenever ANY property of someObject changes - not just the one property (someProperty in the above example) our effect might depend on.
    
